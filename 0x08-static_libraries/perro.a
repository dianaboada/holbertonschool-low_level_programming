#include "holberton.h"
#include <unistd.h>
#include <string.h>
#include <stdio.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

/**
* _islower - check the code for Holberton School students.
*
*@c: check for lowercase character
*
* Return: Always 0.
*/
int _islower(int c)
{
	for ( ; c >= 97 && c <= 122 ; )
	{
		return (1);
	}
	return (0);
}

/**
* _isalpha - check the code for Holberton School students.
*
* @c: check for alphabetic characters is a letter, lowercase or uppercase.
*
* Return: Always 0.
*/
int _isalpha(int c)
{
	for ( ; ((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) ; )
	{
		return (1);
	}
	return (0);
}

/**
* _abs - check the code for Holberton School students.
*
* @absvalue: a function that computes the absolute value of an integer.
*
* Return: Always 0.
*/
int _abs(int absvalue)
{
	if (absvalue > 0)
		return (absvalue);

	if (absvalue < 0)
	{
		absvalue = absvalue * -1;
		return (absvalue);
	}
return (0);
}

/**
* _isupper - function that checks for uppercase character.
* @c: Entry of the character to check.
*
* Return: On success 1.
* On error, 0.
*/

int _isupper(int c)
{
	if (c >= 65 && c <= 90)
		return (1);
	else
		return (0);
}


/**
* _isdigit - function that checks for a digit (0 through 9).
* @c: Entry of the character to check.
*
* Return: On success 1.
* On error, 0.
*/

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	else
		return (0);
}

/**
* _strlen - A function that returns the length of a string.
* @s: string.
*
* Return: counter
*/
int _strlen(char *s)
{
	int counter;

	for (counter = 0; s[counter] != '\0'; counter++)
	{
	}
	return (counter);
}


/**
* _strcpy - function.
* @dest: string destination.
* @src: string source.
*
* Return: char
*/
char *_strcpy(char *dest, char *src)
{
	return 'a';
}


/**
* _atoi - function.
* @s: string.
*
* Return: int
*/
int _atoi(char *s)
{
	retunr 0;
}


/**
* _strcat - function that concatenates two strings.
* @dest: saves string1.
* @src: saves string2.
*
* Return: dest
*/
char *_strcat(char *dest, char *src)
{
	int string1 = 0;
	int string2 = 0;

	for (string1 = 0; dest[string1] != '\0'; string1++)
	{
	}
	for (string2 = 0; src[string2] != '\0'; string2++)
	{
		dest[string1 + string2] = src[string2];
	}
	dest[string2 + string1] = src[string2];
	return (dest);

}

/**
* *_strncat - function that concatenates two strings.
* @dest: saves string1.
* @src: saves string2.
* @n: entry.
*
* Return: dest
*/
char *_strncat(char *dest, char *src, int n)
{
	int string1 = 0;
	int string2 = 0;

	for (string1 = 0; dest[string1] != '\0'; string1++)
	{
	}
	for (string2 = 0; src[string2] != '\0' && string2 < n ; string2++)
	{
		dest[string1 + string2] = src[string2];
	}
	return (dest);
}

/**
* *_strncpy - function that copies a string.
* @dest: saves string1.
* @src: saves string2.
* @n: entry.
*
* Return: dest
*/
char *_strncpy(char *dest, char *src, int n)
{
	int iterator;

	for (iterator = 0; iterator < n && src[iterator] != '\0'; iterator++)
		dest[iterator] = src[iterator];
	for (; iterator < n; iterator++)
		dest[iterator] = '\0';
	return (dest);
}


/**
* _strcmp - function that compares two strings.
* @s1: string1.
* @s2: string2.
*
* Return: 0.
*/
int _strcmp(char *s1, char *s2)
{
	int index;

	for (index = 0; s1[index] != '\0'; index++)
	{
		if ((s1[index] - s2[index]) != 0)
			return ((s1[index] - s2[index]));
	}
	return (0);
}


/**
* *_memset - function that fills memory with a constant byte.
* @s: Array.
* @b: cons to add.
* @n: times to add the cons.
*
* Return: 0.
*/
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int counter;

	for (counter = 0; counter < n; counter++)
	{
		*(s + counter) = b;
	}
	return (s);
}


/**
* *_memcpy - A function that copies memory area.
* @dest: destination.
* @src: source to copy.
* @n: the area to copy.
*
* Return: char.
*/
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int counter;

	for (counter = 0; counter < n && src[counter] != '\0'; counter++)
		dest[counter] = src[counter];
	for ( ; counter < n; counter++)
		dest[counter] = '\0';
	return (dest);
}


/**
* *_strchr - Function that locates a character in a string.
* @s: string.
* @c: character to locate.
*
* Return: char.
*/
char *_strchr(char *s, char c)
{
	int index = 0;

	while (s[index] != c)
	{
		if (s[index] == '\0')
		{
		return (0);
		}
		index++;
	}
	return (&s[index]);
}


/**
* _strspn - Function that gets the length of a prefix substring.
* @s: string.
* @accept: substring.
*
* Return: unsigned int.
*/
unsigned int _strspn(char *s, char *accept)
{
	unsigned int index = 0;
	unsigned int index2 = 0;
	unsigned int aux = 0;
	unsigned int count = 0;

	while (s[index] != '\0')
	{
		while (accept[index2] != '\0')
		{
			if (s[index] == accept[index2])
			{
				aux = aux + 1;
			}
			index2++;
		}
		if (count == aux)
		{
			break;
		}
		else
		{
			count = aux;
		}
		index2 = 0;
		index++;
	}
	return (aux);
}


/**
* *_strpbrk - Function that searches a string for any of a set of bytes.
* @s: string.
* @accept: substring.
*
* Return: char.
*/
char *_strpbrk(char *s, char *accept)
{
	int index_s;
	int index_accept;
	int index_equal = 0;
	int flag = 0;

	for (index_s = 0; s[index_s] != '\0'; index_s++)
	{
		for (index_accept = 0; accept[index_accept] != '\0'; index_accept++)
		{
			if (s[index_s] == accept[index_accept])
			{
				index_equal = index_s;
				flag = 1;
				break;
			}
		}
		if (flag == 1)
			break;
	}
	if (flag != 1)
		return ('\0');
	else
		return (&s[index_equal]);
}


/**
* *_strstr - Function that locates a substring.
* @haystack: string where to search.
* @needle: string to search.
*
* Return: char.
*/
char *_strstr(char *haystack, char *needle)
{
	int i_needle;
	int i_haystack;
	int flag = 0;
	int i_final = 0;
	int flag1 = 0;

	for (i_needle = 0; needle[i_needle] != '\0'; i_needle++)
	{
		for (; haystack[i_haystack] != '\0'; i_haystack++)
		{
			if (needle[i_needle] == haystack[i_haystack])
			{
				flag = 1;
				if (flag1 == 0)
				{
					i_final = i_haystack;
					flag1 = 1;
				}
				break;
			}
			else
			{
				flag1 = 0;
				i_needle = 0;
			}
		}
		if (flag == 1)
			continue;
		else
			return ('\0');
		}
	return (&haystack[i_final]);
}
